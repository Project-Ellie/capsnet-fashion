#@IgnoreInspection BashAddShebang
PY=python3
TF_VERSION=1.7.0.dev20180210
TF_NIGHTLY=tf_nightly
echo
echo "========================================================================================================"
echo using `which ${PY}`
${PY} --version
echo "========================================================================================================"
echo

if [ "$1" = "-h" ] || [ "$1" = "--help" ]
then
    echo "Usage: source init_env [env]"
    echo
    echo env: Name of the environment folder, defaults to venv
else # this is intended. Can't use exit, since this file is supposed to be sourced. Will close at the very end of the script


num_gpus=0
if [ "$(which nvidia-smi)" != "" ]
then
    num_gpus=$(nvidia-smi -q | grep "Product Name" | wc -l)
fi

if [  "$num_gpus" != "0" ]
then
    USE_GPU="-gpu"
    echo
    echo "========================================================================================================"
    echo Found ${num_gpus} on the system:
    echo $(nvidia-smi -q | grep "Product Name")
    echo Pip is going to install tensorflow with gpu support
    echo "========================================================================================================"
    echo
else
    echo
    echo "========================================================================================================"
    echo  Did not find any usable GPUs. pip is going to install tensorflow without gpu support
    echo "========================================================================================================"
    echo
fi

#
# If you didn't specify the environment name, we will always create a fresh environment named 'venv'
#
if [ "$1" = "" ]
then
    envdir=venv
    echo "Using default environment directory venv. Will overwrite if it exists."
    rm -rf venv
    create_envdir=true

else
    envdir=$1

    echo Creating your virtual environment in ${envdir}

    if [ -d "$envdir" ]
    then
        echo "overwrite existing ${envdir}? (Yy/n)"
        read doit
        if [ "${doit}" = "y" ] || [ "${doit}" = "Y" ]
        then
            rm -rf "$envdir"
            create_envdir=true
        fi
    else
        create_envdir=true
    fi
fi

if [ "${create_envdir}" = "true" ]
then
    virtualenv --python=${PY} ${envdir}
    . ./${envdir}/bin/activate


    echo
    echo "========================================================================================================"
    echo Installing packages
    echo "========================================================================================================"
    if [ -z ${TF_NIGHTLY} ]
    then
        TENSORFLOW=tensorflow${USE_GPU}==${TF_VERSION}
    else
        TENSORFLOW=tf-nightly${USE_GPU}
    fi

    echo "========================================================================================================"
    if [ -z ${USE_GPU} ]
    then
        echo Installing ${TENSORFLOW} with CPU support only
    else
        echo Installing ${TENSORFLOW} with GPU support. This requires cuda version 9.0+ installed.
    fi
    echo "========================================================================================================"
    ${PY} -m pip install ${TENSORFLOW}

    ${PY} -m pip install -r ./shell/package.versions

else
    echo
    echo "========================================================================================================"
    echo activating virtual environment
    echo "========================================================================================================"
    . ./${envdir}/bin/activate
fi

export PATH=$PATH:${PWD}/shell
export ELLIE_HOME=${PWD}

fi # from the help check